// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/gera9/go-blog/internal/users"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRepository
func (_mock *MockRepository) Create(ctx context.Context, user users.User) (uuid.UUID, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.User) (uuid.UUID, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.User) uuid.UUID); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, users.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockRepository_Expecter) Create(ctx interface{}, user interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, user users.User)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(users.User))
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(uUID uuid.UUID, err error) *MockRepository_Create_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(ctx context.Context, user users.User) (uuid.UUID, error)) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteById(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockRepository_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockRepository_Expecter) DeleteById(ctx interface{}, id interface{}) *MockRepository_DeleteById_Call {
	return &MockRepository_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockRepository_DeleteById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_DeleteById_Call) Return(err error) *MockRepository_DeleteById_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteById_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockRepository_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function for the type MockRepository
func (_mock *MockRepository) GetById(ctx context.Context, id uuid.UUID) (*users.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*users.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *users.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockRepository_Expecter) GetById(ctx interface{}, id interface{}) *MockRepository_GetById_Call {
	return &MockRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockRepository_GetById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_GetById_Call) Return(user *users.User, err error) *MockRepository_GetById_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockRepository_GetById_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*users.User, error)) *MockRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockRepository
func (_mock *MockRepository) List(ctx context.Context, q users.QueryList) ([]users.User, int, error) {
	ret := _mock.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []users.User
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.QueryList) ([]users.User, int, error)); ok {
		return returnFunc(ctx, q)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.QueryList) []users.User); ok {
		r0 = returnFunc(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, users.QueryList) int); ok {
		r1 = returnFunc(ctx, q)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, users.QueryList) error); ok {
		r2 = returnFunc(ctx, q)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx
//   - q
func (_e *MockRepository_Expecter) List(ctx interface{}, q interface{}) *MockRepository_List_Call {
	return &MockRepository_List_Call{Call: _e.mock.On("List", ctx, q)}
}

func (_c *MockRepository_List_Call) Run(run func(ctx context.Context, q users.QueryList)) *MockRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(users.QueryList))
	})
	return _c
}

func (_c *MockRepository_List_Call) Return(users1 []users.User, n int, err error) *MockRepository_List_Call {
	_c.Call.Return(users1, n, err)
	return _c
}

func (_c *MockRepository_List_Call) RunAndReturn(run func(ctx context.Context, q users.QueryList) ([]users.User, int, error)) *MockRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateById provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateById(ctx context.Context, id uuid.UUID, user users.User) error {
	ret := _mock.Called(ctx, id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateById")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, users.User) error); ok {
		r0 = returnFunc(ctx, id, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_UpdateById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateById'
type MockRepository_UpdateById_Call struct {
	*mock.Call
}

// UpdateById is a helper method to define mock.On call
//   - ctx
//   - id
//   - user
func (_e *MockRepository_Expecter) UpdateById(ctx interface{}, id interface{}, user interface{}) *MockRepository_UpdateById_Call {
	return &MockRepository_UpdateById_Call{Call: _e.mock.On("UpdateById", ctx, id, user)}
}

func (_c *MockRepository_UpdateById_Call) Run(run func(ctx context.Context, id uuid.UUID, user users.User)) *MockRepository_UpdateById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(users.User))
	})
	return _c
}

func (_c *MockRepository_UpdateById_Call) Return(err error) *MockRepository_UpdateById_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_UpdateById_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, user users.User) error) *MockRepository_UpdateById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockService
func (_mock *MockService) Create(ctx context.Context, user users.User) (uuid.UUID, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.User) (uuid.UUID, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.User) uuid.UUID); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, users.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockService_Expecter) Create(ctx interface{}, user interface{}) *MockService_Create_Call {
	return &MockService_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockService_Create_Call) Run(run func(ctx context.Context, user users.User)) *MockService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(users.User))
	})
	return _c
}

func (_c *MockService_Create_Call) Return(uUID uuid.UUID, err error) *MockService_Create_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockService_Create_Call) RunAndReturn(run func(ctx context.Context, user users.User) (uuid.UUID, error)) *MockService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function for the type MockService
func (_mock *MockService) DeleteById(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockService_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockService_Expecter) DeleteById(ctx interface{}, id interface{}) *MockService_DeleteById_Call {
	return &MockService_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockService_DeleteById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockService_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockService_DeleteById_Call) Return(err error) *MockService_DeleteById_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_DeleteById_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockService_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function for the type MockService
func (_mock *MockService) GetById(ctx context.Context, id uuid.UUID) (*users.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*users.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *users.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockService_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockService_Expecter) GetById(ctx interface{}, id interface{}) *MockService_GetById_Call {
	return &MockService_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockService_GetById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockService_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockService_GetById_Call) Return(user *users.User, err error) *MockService_GetById_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockService_GetById_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*users.User, error)) *MockService_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockService
func (_mock *MockService) List(ctx context.Context, q users.QueryList) ([]users.User, int, error) {
	ret := _mock.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []users.User
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.QueryList) ([]users.User, int, error)); ok {
		return returnFunc(ctx, q)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.QueryList) []users.User); ok {
		r0 = returnFunc(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, users.QueryList) int); ok {
		r1 = returnFunc(ctx, q)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, users.QueryList) error); ok {
		r2 = returnFunc(ctx, q)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx
//   - q
func (_e *MockService_Expecter) List(ctx interface{}, q interface{}) *MockService_List_Call {
	return &MockService_List_Call{Call: _e.mock.On("List", ctx, q)}
}

func (_c *MockService_List_Call) Run(run func(ctx context.Context, q users.QueryList)) *MockService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(users.QueryList))
	})
	return _c
}

func (_c *MockService_List_Call) Return(users1 []users.User, n int, err error) *MockService_List_Call {
	_c.Call.Return(users1, n, err)
	return _c
}

func (_c *MockService_List_Call) RunAndReturn(run func(ctx context.Context, q users.QueryList) ([]users.User, int, error)) *MockService_List_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateById provides a mock function for the type MockService
func (_mock *MockService) UpdateById(ctx context.Context, id uuid.UUID, user users.User) error {
	ret := _mock.Called(ctx, id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateById")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, users.User) error); ok {
		r0 = returnFunc(ctx, id, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_UpdateById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateById'
type MockService_UpdateById_Call struct {
	*mock.Call
}

// UpdateById is a helper method to define mock.On call
//   - ctx
//   - id
//   - user
func (_e *MockService_Expecter) UpdateById(ctx interface{}, id interface{}, user interface{}) *MockService_UpdateById_Call {
	return &MockService_UpdateById_Call{Call: _e.mock.On("UpdateById", ctx, id, user)}
}

func (_c *MockService_UpdateById_Call) Run(run func(ctx context.Context, id uuid.UUID, user users.User)) *MockService_UpdateById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(users.User))
	})
	return _c
}

func (_c *MockService_UpdateById_Call) Return(err error) *MockService_UpdateById_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_UpdateById_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, user users.User) error) *MockService_UpdateById_Call {
	_c.Call.Return(run)
	return _c
}
